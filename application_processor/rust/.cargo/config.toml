[build]
target = "thumbv7em-none-eabi"

[target.thumbv7em-none-eabi]
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
rustflags = [
  # This is needed if your flash or ram addresses are not aligned to 0x10000 in memory.x
  # See https://github.com/rust-embedded/cortex-m-quickstart/pull/95
  # "-C", "link-arg=--nmagic",

  # LLD (shipped with the Rust toolchain) is used as the default linker
  # "-C", "link-arg=-Tlink.x",

  # if you run into problems with LLD switch to the GNU linker by commenting out
  # this line
  # "-C", "linker=arm-none-eabi-ld",

  # if you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by commenting out both lines above and then
  # uncommenting the three lines below
  "-C", "linker=arm-none-eabi-gcc",
  "-C", "link-arg=-Wl,-Tlink.x",
  "-C", "link-arg=-nostartfiles",
  # specify -mthumb -mcpu=cortex-m4 -mfloat-abi=softfp -mfpu=fpv4-sp-d16
  "-C", "link-arg=-mthumb",
  "-C", "link-arg=-mcpu=cortex-m4",
  # "-C", "link-arg=-mfloat-abi=softfp",
  # "-C", "link-arg=-mfloat-abi=hard",
  # "-C", "link-arg=-mfpu=fpv4-sp-d16",
  # "-C", "link-arg=-Wl,--gc-sections",
  "-C", "link-arg=-lc",
  # "-C", "link-arg=-lgcc",
  # "-C", "link-arg=-lnosys",
]